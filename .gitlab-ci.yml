image: docker:stable
services: 
  - docker:dind

variables:
  SQL_HOST: 'db'
  SQL_PORT: '5432'
  DATABASE: 'postgres'
  APP_FOLDER: '/usr/src/app/tmtar'
  DB_INIT: 'True'

stages:
  - build
  - test
  - release


build:
  tags: 
    - docker
  stage: build
  before_script:
    - apk add --no-cache docker-compose
    - export
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.gitlab.com
  script:
    #- docker pull registry.gitlab.com/baltazar1697/tmtar_api 
    #- docker build --cache-from registry.gitlab.com/baltazar1697/tmtar_api -t registry.gitlab.com/baltazar1697/tmtar_api:$CI_BUILD_REF -tag registry.gitlab.com/baltazar1697/tmtar_api:latest .
    - docker-compose -f docker-compose.yml build
    - docker push registry.gitlab.com/baltazar1697/tmtar_api
    #- docker push registry.gitlab.com/baltazar1697/tmtar_api:$CI_BUILD_REF
    #- docker push registry.gitlab.com/baltazar1697/tmtar_api:latest
    
  artifacts:
    paths:
      - services/web
    expire_in: never

test:
  tags:
    - docker
  stage: test
  before_script:
    - apk add --no-cache docker-compose
  script:
    - docker-compose -f docker-compose.test.yml up 
  allow_failure: true 

deploy:
  stage: release
  before_script:
    - apk add --no-cache docker-compose
  script:
    - docker-compose -f docker-compose.prod.yml down
    - docker-compose -f docker-compose.prod.yml up -d
    - docker-compose -f docker-compose.prod.yml python manage.py db upgrade
