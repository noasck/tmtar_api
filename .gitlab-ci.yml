variables:
  SQL_HOST: 'db'
  SQL_PORT: '5432'
  DATABASE: 'postgres'
  APP_FOLDER: '/usr/src/app/tmtar'

image: docker:stable
services: 
  - docker:dind

stages:
  - build
  - test
  - release

build:
  stage: build
  tags: 
    - docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.gitlab.com
  script:
    - docker pull registry.gitlab.com/baltazar1697/tmtar_api || true
    - docker build --cache-from registry.gitlab.com/baltazar1697/tmtar_api -t registry.gitlab.com/baltazar1697/tmtar_api:$CI_BUILD_REF --tag registry.gitlab.com/baltazar1697/tmtar_api:latest --tag registry.gitlab.com/baltazar1697/tmtar_api services/web/
    - docker push registry.gitlab.com/baltazar1697/tmtar_api:$CI_BUILD_REF
    - docker push registry.gitlab.com/baltazar1697/tmtar_api:latest


codestyle-check:
  stage: test
  image: python:3.9.5-slim-buster
  before_script:
    - pip3 install wemake-python-styleguide flake8
  script:
    - flake8 --tee --output-file=codestyle.log .
  artifacts:
    reports:
      codequality: codestyle.json
  # only:
  #   - api_dev

test:
  stage: test
  before_script:
    - apk add --no-cache docker-compose
  script:
    - docker-compose -f docker-compose.test.yml up -d
  after_script:
    - docker-compose down
  artifacts:
    when: always
    reports:
      junit: services/web/report.xml 
    expire_in: 1 day
  # only:
  #   - api_dev

deploy:
  stage: release
  before_script:
    - apk add --no-cache docker-compose
  script:
    - docker-compose -f docker-compose.prod.yml up -d --build
    # - docker-compose exec web python manage.py db upgrade
  after_script:
    - docker-compose down
  only: 
    - master
